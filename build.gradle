plugins {
    id 'eclipse'
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id "me.shedaniel.unified-publishing" version "0.1.+"
    id 'net.neoforged.gradle.userdev' version '7.0.145'
    id 'net.neoforged.gradle.mixin' version '7.0.145'
}

version = "${minecraft_version}-NeoForge-${mod_version}"
group = "snownee.jade" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
var realVersion = project.mod_version + '+neoforge'

repositories {
    mavenLocal()
}

base {
    archivesName = "Jade"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

if (System.getenv().BUILD_NUMBER != null) {
    // Maven version scheme uses dot to separate things
    version += ".${System.getenv().BUILD_NUMBER}"
}

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

task apiJar(type: Jar) {
    archiveClassifier = 'api'
    include 'snownee/jade/api/**/*'
    from sourceSets.main.allSource
    from sourceSets.main.output
}

artifacts {
    archives apiJar
}

repositories {
    maven {
        name = "jei"
        url = "https://maven.blamejared.com/"
    }
    maven {
        url = "https://modmaven.dev"
    }
    maven {
        url = "https://www.cursemaven.com"
    }
}

mixin {
    // add sourceSets.main, "${mod_id}.refmap.json"
    // Sets up the mixin config; this gets added to run configurations and the manifest in the final jar
    config "${mod_id}.mixins.json"

    // Enables exporting mixin-changed classes to .mixin.out in the run folder
    // debug.export = true
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    implementation "net.neoforged:neoforge:${neo_version}"
    // annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    compileOnly "mezz.jei:jei-1.21.1-common-api:${jei_version}"
    //compileOnly "mezz.jei:jei-1.20.2-forge-api:${jei_version}"
    //runtimeOnly "mezz.jei:jei-1.20.2-forge:${jei_version}"
    //implementation "curse.maven:jei-238222:3834070"
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    exclude '/snownee/jade/test'
    manifest {
        attributes([
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${realVersion}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

java {
    withSourcesJar()
}

publishing {
    repositories {
        maven {
            name = "shadowsMaven"
            url = "https://maven.shadowsoffire.dev/releases"
            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            groupId = "${group}"
            artifactId = "Jade-NeoForge"
            version = "${minecraft_version}-${mod_version}"
            from components.java
        }
    }
}

unifiedPublishing {
    project {
        displayName = "[NeoForge $project.supported_version] $project.mod_version"
        version = realVersion // Optional, Inferred from project by default
        changelog = file("CHANGELOG.md").exists() ? file("CHANGELOG.md").text : "" // Optional, in markdown format
        releaseType = project.release_type // Optional, use "release", "beta" or "alpha"
        gameVersions = [project.archive_minecraft_version]
        gameLoaders = ["neoforge"]

        mainPublication tasks.jar // Declares the publicated jar
        secondaryPublications.builtBy(tasks.apiJar)

        if (System.getenv("CURSE_TOKEN") != null) {
            curseforge {
                token = System.getenv("CURSE_TOKEN")
                id = "324717"

                relations { // Optional, Inferred from the relations above by default
                    optional "jei"
                }
            }
        }

        if (System.getenv("MODRINTH_TOKEN") != null) {
            modrinth {
                token = System.getenv("MODRINTH_TOKEN")
                id = "nvQzSEkH"

                relations { // Optional, Inferred from the relations above by default
                    optional "jei"
                }
            }
        }
    }
}
